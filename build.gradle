description = 'Spring XD'

buildscript {
	repositories {
		maven { url "http://repo.springsource.org/plugins-release" }
	}
	dependencies {
		classpath("org.springframework.build.gradle:propdeps-plugin:0.0.3")
		classpath("org.springframework.build.gradle:docbook-reference-plugin:0.2.6")
	}
}

allprojects {
	group = 'org.springframework.xd'
	repositories {
		maven { url 'http://repo.springsource.org/libs-snapshot' }
		maven { url 'http://repo.springsource.org/plugins-release' }
	}
}

subprojects { subproject ->

	apply plugin: 'java'
	apply from:   "${rootProject.projectDir}/publish-maven.gradle"
	apply plugin: 'eclipse'
	apply plugin: 'idea'

	sourceCompatibility=1.6
	targetCompatibility=1.6

	ext {
		jacksonVersion = '1.9.12'
		junitVersion = '4.11'
		hamcrestVersion = '1.3'
		springVersion = '3.2.2.RELEASE'
		springBatchVersion = '2.1.9.RELEASE'
		springIntegrationVersion = '3.0.0.BUILD-SNAPSHOT'
		springDataMongoVersion = '1.1.1.RELEASE'
		springDataRedisVersion = '1.0.4.RELEASE'
		springDataHadoopVersion = '1.0.0.RELEASE'
	}
	
	eclipse {
		project {
			natures += 'org.springframework.ide.eclipse.core.springnature'
		}
	}

	sourceSets {
		test {
			resources {
				srcDirs = ['src/test/resources', 'src/test/java']
			}
		}
	}

	configurations {
		jacoco //Configuration Group used by Sonar to provide Code Coverage using JaCoCo
	}

	// dependencies that are common across all java projects
	dependencies {
		testCompile "junit:junit-dep:$junitVersion"
		testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"
		jacoco group: "org.jacoco", name: "org.jacoco.agent", version: "0.6.2.201302030002", classifier: "runtime"
	}

	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from sourceSets.main.allJava
	}

	task javadocJar(type: Jar) {
		classifier = 'javadoc'
		from javadoc
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}

}

project('spring-xd-analytics') {
	description = 'Spring XD Anaytics'
}

project('spring-xd-dirt') {
	description = 'Spring XD DIRT'
	dependencies {
		compile project(":spring-xd-module")
		compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"
		compile "org.springframework.integration:spring-integration-event:$springIntegrationVersion"
		compile "org.springframework.integration:spring-integration-redis:$springIntegrationVersion"
		testCompile project(":spring-xd-test")
	}
}

project('spring-xd-module') {
	description = 'Spring XD Module'
	dependencies {
		compile "org.springframework:spring-context:$springVersion"
	}
}

project('spring-integration-module') {
	description = 'Spring Integration Module Support'
	dependencies {
		compile project(":spring-xd-module")
		compile "org.springframework.integration:spring-integration-core:$springIntegrationVersion"
	}
}

project('spring-xd-tuple') {
	description = 'Spring XD Tuple'
	dependencies {
		compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"
		compile "org.springframework.integration:spring-integration-core:$springIntegrationVersion"
	}
}

project('spring-xd-hadoop') {
	description = 'Spring XD Hadoop'
	dependencies {
		compile "org.springframework:spring-aop:$springVersion"
		compile "org.springframework:spring-context:$springVersion"
		compile "org.springframework:spring-context-support:$springVersion"
		compile "org.springframework:spring-jdbc:$springVersion"
		compile "org.springframework:spring-tx:$springVersion"
		compile "org.springframework.integration:spring-integration-core:$springIntegrationVersion"
		compile "org.springframework.batch:spring-batch-core:$springBatchVersion"
		compile "org.springframework.data:spring-data-mongodb:$springDataMongoVersion"
		compile "org.springframework.data:spring-data-hadoop:$springDataHadoopVersion"
	}
}

project('spring-xd-test') {
	description = 'Spring XD Test'
	dependencies {
		compile "org.springframework.integration:spring-integration-test:$springIntegrationVersion"
		compile "org.springframework.integration:spring-integration-redis:$springIntegrationVersion"
		compile "junit:junit-dep:$junitVersion"
	}
}

apply plugin: 'sonar'

sonar {

	if (rootProject.hasProperty('sonarHostUrl')) {
		server.url = rootProject.sonarHostUrl
	}

	database {
		if (rootProject.hasProperty('sonarJdbcUrl')) {
			url = rootProject.sonarJdbcUrl
		}
		if (rootProject.hasProperty('sonarJdbcDriver')) {
			driverClassName = rootProject.sonarJdbcDriver
		}
		if (rootProject.hasProperty('sonarJdbcUsername')) {
			username = rootProject.sonarJdbcUsername
		}
		if (rootProject.hasProperty('sonarJdbcPassword')) {
			password = rootProject.sonarJdbcPassword
		}
	}

	project {
		dynamicAnalysis  = "reuseReports"
		withProjectProperties { props ->
			props["sonar.core.codeCoveragePlugin"] = "jacoco"
			props["sonar.jacoco.reportPath"]       = "${buildDir.name}/jacoco.exec"
		}
	}

	logger.info("Sonar parameters used: server.url='${server.url}'; database.url='${database.url}'; database.driverClassName='${database.driverClassName}'; database.username='${database.username}'")
}

task wrapper(type: Wrapper) {
	description = "Generates gradlew[.bat] scripts"
	gradleVersion = "1.5"
}

